#include <iostream> // Подключаем библиотеку ввода-вывода

// Функция для вывода элементов массива
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) { // Проходим по массиву и выводим каждый элемент
        std::cout << arr[i] << " ";   // Вывод текущего элемента
    }
    std::cout << "\n";                // Переход на новую строку после вывода всех элементов
}

// Основная функция сортировки выбором
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {               // Внешний цикл проходит по каждому элементу массива
        int minIndex = i;                           // Предполагаем, что минимальный элемент находится здесь
        
        // Внутренний цикл ищет наименьший элемент среди оставшихся неотсортированных элементов
        for (int j = i + 1; j < n; ++j) {           // Начинаем проверять элементы справа от текущего индекса
            if (arr[j] < arr[minIndex]) {           // Если нашли меньший элемент
                minIndex = j;                       // Запоминаем индекс найденного меньшего элемента
            }
        }
    
        // Меняем местами текущий элемент и найденный минимальный элемент
        if (minIndex != i) {                        // Проверяем, нужен ли обмен
            std::swap(arr[i], arr[minIndex]);       // Обмен значений двух элементов
        }
    }
}

// Главная функция программы
int main() {
    int array[] = {64, 25, 12, 22, 11};     // Пример исходного несортированного массива
    int n = sizeof(array)/sizeof(array[0]);  // Вычисляем размер массива
    
    std::cout << "Исходный массив:\n";
    printArray(array, n);                    // Выводим исходный массив перед сортировкой
    
    selectionSort(array, n);                 // Сортируем массив методом выборки
    
    std::cout << "Отсортированный массив:\n";
    printArray(array, n);                    // Выводим отсортированный массив
    
    return 0;                                // Завершаем программу успешно
}

Пример выполнения:
Исходный массив:
64 25 12 22 11 
Отсортированный массив:
11 12 22 25 64